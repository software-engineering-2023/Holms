"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CryptoJS = __importStar(require("crypto-js"));
const presets_1 = __importDefault(require("./constants/presets"));
const service_codes_1 = __importDefault(require("./constants/service_codes"));
const CreditCardTypes_1 = __importDefault(require("./types/CreditCardTypes"));
class CreditCardGenerator {
    encryption_key;
    cc_presents;
    service_code;
    log_in_console;
    constructor(encryption_key = null, cc_presents = null, service_code = 201, log_in_console = false) {
        this.log_in_console = log_in_console;
        if (encryption_key === null) {
            encryption_key = this.generate_encryption_key();
        }
        if (encryption_key && encryption_key.length !== 32) {
            throw new Error("Invalid encryption key. Please pass a 32 hex characters key leave blank.");
        }
        if (cc_presents === null) {
            cc_presents = presets_1.default;
        }
        if (!service_codes_1.default.includes(service_code)) {
            throw new Error("Invalid service code. Service code should have 3 digits and have values: " +
                service_codes_1.default);
        }
        this.encryption_key = encryption_key;
        this.cc_presents = cc_presents;
        this.service_code = service_code;
    }
    generate_one(type = CreditCardTypes_1.default.VISA) {
        let cc_number = this.generate_cc_number(type);
        while (!CreditCardGenerator.check_sum(cc_number)) {
            cc_number = this.generate_cc_number(type);
        }
        const expiry = this.generate_expiry_date();
        return {
            number: cc_number,
            expiry: expiry,
            cvv2: this.generate_cvv2(cc_number, expiry),
        };
    }
    generate_set(size, type = CreditCardTypes_1.default.VISA) {
        const set = new Set();
        while (set.size < size) {
            set.add(this.generate_one(type));
        }
        return set;
    }
    generate_cc_number(type) {
        let cc_number = this.cc_presents[type].prefixes[Math.floor(Math.random() * this.cc_presents[type].prefixes.length)];
        while (cc_number.length < this.cc_presents[type].digit_len - 1) {
            cc_number += Math.floor(Math.random() * 10);
        }
        const isEven = (number) => number % 2 === 0;
        const calculateEven = (even) => even * 2 < 10 ? even * 2 : even * 2 - 9;
        const checksum = cc_number
            .split("")
            .map((number, index) => isEven(index)
            ? calculateEven(parseInt(number))
            : parseInt(number, 10))
            .reduce((previous, current) => previous + current) % 10;
        cc_number += checksum === 0 ? 0 : 10 - checksum;
        return cc_number;
    }
    generate_expiry_date(year = null) {
        const currentYear = year !== null ? year : new Date().getFullYear();
        const expiryYear = ((currentYear % 100) + 4).toString();
        const expiryMonth = (Math.floor(Math.random() * 12) + 1).toString();
        return {
            month: expiryMonth.length < 2 ? "0" + expiryMonth : expiryMonth,
            year: expiryYear,
        };
    }
    generate_cvv2(cc_number, expiry) {
        let data = cc_number + expiry.month + expiry.year + this.service_code;
        while (data.length < 32) {
            data += 0;
        }
        const split_key = {
            first: this.encryption_key.slice(0, 16),
            second: this.encryption_key.slice(16, 32),
        };
        const split_data = {
            first: data.slice(0, 16),
            second: data.slice(16, 32),
        };
        /** Encrypt (DES) the first half of the data with the first half of the key */
        let first_step = this.encrypt_DES(split_data.first, split_key.first);
        /** XOR the result with the second half of data */
        let second_step = this.xor(first_step, split_data.second);
        /** Encrypt (DES) the result with the first half of the Key */
        let third_step = this.encrypt_DES(second_step, split_key.first);
        /** Decrypt (DES) the result with the second half of the key */
        const fourth_step = this.decrypt_DES(third_step, split_key.second);
        /**  Encrypt (DES) the result with the first half of the key */
        const fifth_step = this.encrypt_DES(fourth_step, split_key.first);
        return fifth_step.replace(/\D/g, "").slice(0, 3);
    }
    encrypt_DES(data, key) {
        const keyWordArray = CryptoJS.enc.Utf8.parse(key);
        const dataWordArray = CryptoJS.enc.Utf8.parse(this.pad_data(data));
        const encryptedData = CryptoJS.DES.encrypt(dataWordArray, keyWordArray, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.NoPadding,
        });
        return encryptedData.ciphertext.toString(CryptoJS.enc.Hex);
    }
    decrypt_DES(data, key) {
        const keyWordArray = CryptoJS.enc.Utf8.parse(key);
        const decryptedData = CryptoJS.DES.decrypt(data, keyWordArray, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.NoPadding,
        });
        return decryptedData.toString();
    }
    pad_data(data) {
        const blockSize = 8;
        if (data.length < blockSize) {
            return data.padEnd(blockSize, "\0");
        }
        else if (data.length > blockSize) {
            return data.slice(0, blockSize);
        }
        return data;
    }
    hexToBinary(hex) {
        return BigInt(`0x${hex}`)
            .toString(2)
            .padStart(hex.length * 4, "0");
    }
    binaryToHex(binary) {
        return BigInt(`0b${binary}`).toString(16).toUpperCase();
    }
    xor(hex1, hex2) {
        const binary1 = this.hexToBinary(hex1);
        const binary2 = this.hexToBinary(hex2);
        let resultBinary = "";
        for (let i = 0; i < binary1.length; i++) {
            resultBinary += binary1[i] === binary2[i] ? "0" : "1";
        }
        return this.binaryToHex(resultBinary);
    }
    static check_sum(number) {
        let sum = 0;
        let evenPlaces = false;
        for (let i = number.length - 1; i >= 0; i--) {
            let digit = number.charAt(i);
            let value = parseInt(digit);
            if (evenPlaces) {
                value *= 2;
                if (value > 9)
                    value = value - 9;
            }
            sum += value;
            evenPlaces = !evenPlaces;
        }
        return sum % 10 === 0;
    }
    logger(info) {
        if (this.log_in_console === false)
            return;
        const output = `\x1b[32m[${new Date().toISOString()}]: ${info}\x1b[0m`;
        console.log(output);
    }
    generate_encryption_key() {
        const hexDigits = "0123456789abcdefghijklmnopqrstuvwxyz";
        let hex32String = "";
        for (let _ = 0; _ < 32; _++) {
            hex32String +=
                hexDigits[Math.floor(Math.random() * hexDigits.length)];
        }
        this.logger(`Using generated encryption key: ${hex32String}`);
        return hex32String;
    }
}
exports.default = CreditCardGenerator;
